#include <iostream>
#include <vector>
using namespace std;

// Node class definition
class Node {
public:
    int data;
    Node* next;
    Node(int data1) {
        data = data1;
        next = NULL;
    }
};

// Convert an array to a linked list
Node* convertarrtoll(vector<int> arr) {
    if (arr.empty()) return NULL; // Handle empty array case

    Node* head = new Node(arr[0]);
    Node* mover = head;
    for (int i = 1; i < arr.size(); i++) {
        Node* temp = new Node(arr[i]);
        mover->next = temp;
        mover = temp;
    }
    return head;
}

// Function to get the length of a linked list
int lengthofll(Node* head) {
    int c = 0;
    Node* temp = head;
    while (temp) {
        temp = temp->next;
        c++;
    }
    return c;
}

// Delete the head node
Node* deletehead(Node* head) {
    if (head == NULL) {
        cout << "The list is already empty!" << endl;
        return NULL;
    }
    Node* temp = head;
    head = head->next;
    delete temp;
    cout << "Head node deleted successfully." << endl;
    return head;
}

// Delete the tail node
Node* deletetail(Node* head) {
    if (head == NULL) {
        cout << "The list is already empty!" << endl;
        return NULL;
    }
    if (head->next == NULL) {
        delete head;
        cout << "Only node in the list deleted." << endl;
        return NULL;
    }

    Node* temp = head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }
    delete temp->next;
    temp->next = NULL;
    cout << "Tail node deleted successfully." << endl;
    return head;
}

// Delete the kth node
Node* deleteK(Node* head, int k) {
    if (head == NULL) {
        cout << "The list is empty. Nothing to delete." << endl;
        return NULL;
    }
    if (k <= 0) {
        cout << "Invalid position: " << k << ". Please enter a positive integer." << endl;
        return head;
    }

    // Handle deletion of the head node
    if (k == 1) {
        Node* temp = head;
        head = head->next;
        delete temp;
        cout << "Node at position " << k << " deleted successfully (head node)." << endl;
        return head;
    }

    Node* temp = head;
    Node* prev = NULL;
    int c = 1;

    // Traverse to the kth node
    while (temp != NULL && c < k) {
        prev = temp;
        temp = temp->next;
        c++;
    }

    // If k is out of bounds
    if (temp == NULL) {
        cout << "Position " << k << " is out of bounds." << endl;
        return head;
    }

    // Delete the kth node
    prev->next = temp->next;
    delete temp;
    cout << "Node at position " << k << " deleted successfully." << endl;
    return head;
}
//function to remove a element in the linkedlist
Node* deleteel(Node* head,int el)
{
    if(head==NULL)
    {
        return NULL;
    }
    if(head->data==el)
    {
        Node* temp=head;
        head=head->next;
       delete temp;
        return head;
    }
    Node* temp=head;
    Node* prev=NULL;
    while(temp!=NULL)
    {
        if(temp->data==el)
        {
           prev->next=prev->next->next; 
          delete temp;
           break;
        }
       prev=temp;
       temp=temp->next;
        
    }
    return head;
}
// Function to print the linked list
void print(Node* head) {
    if (head == NULL) {
        cout << "The list is empty!" << endl;
        return;
    }
    cout << "Linked list: ";
    while (head != NULL) {
        cout << head->data << " -> ";
        head = head->next;
    }
    cout << "NULL" << endl;
}

// Main function
int main() {
    // Initialize a vector and convert it to a linked list
    vector<int> arr = {8, 1, 3, 4, 2, 7, 9};
    Node* head = convertarrtoll(arr);

    cout << "Original linked list:" << endl;
    print(head);

    // Delete the kth node
    int k = 3;
    cout << "Deleting the node at position " << k << ":" << endl;
    head = deleteK(head, k);
    print(head);

    // Delete the head node
    cout << "Deleting the head node:" << endl;
    head = deletehead(head);
    print(head);

    // Delete the tail node
    cout << "Deleting the tail node:" << endl;
    head = deletetail(head);
    print(head);
    
    //Deleting thevalue in linked list
    int el;
    cin>>el;
    cout << "Deleting the node at position " << el << ":" << endl;
    head = deleteel(head, el);
    print(head);
    return 0;
}
